"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeRefs = mergeRefs;
var Helpers = _interopRequireWildcard(require("./helpers"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Used to merge multiple React refs into a single callback ref.
 *
 * @example
 * ```tsx
 * <div ref={mergeRefs([ref, forwardedRef])} />
 * ```
 */
function mergeRefs(refs) {
  return value => {
    refs.forEach(ref => {
      // If the ref is a function, it's a callback ref and we call it with the value.
      if (Helpers.isFunction(ref)) {
        ref(value);
      } else if (ref !== null && ref !== undefined) {
        // If the ref is an object (not null and not undefined), it's an object ref.
        // We assign the value to its 'current' property.
        ref.current = value;
      }
    });
  };
}