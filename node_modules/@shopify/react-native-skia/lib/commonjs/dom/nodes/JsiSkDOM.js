"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JsiSkDOM = void 0;
class JsiSkDOM {
  constructor() {}
  Layer(props) {
    return global.SkiaDomApi.LayerNode(props !== null && props !== void 0 ? props : {});
  }
  Group(props) {
    return global.SkiaDomApi.GroupNode(props !== null && props !== void 0 ? props : {});
  }
  Paint(props) {
    return global.SkiaDomApi.PaintNode(props !== null && props !== void 0 ? props : {});
  }

  // Drawings
  Fill(props) {
    return global.SkiaDomApi.FillNode(props !== null && props !== void 0 ? props : {});
  }
  Image(props) {
    return global.SkiaDomApi.ImageNode(props !== null && props !== void 0 ? props : {});
  }
  Circle(props) {
    return global.SkiaDomApi.CircleNode(props !== null && props !== void 0 ? props : {});
  }
  Path(props) {
    return global.SkiaDomApi.PathNode(props !== null && props !== void 0 ? props : {});
  }
  Line(props) {
    return global.SkiaDomApi.LineNode(props !== null && props !== void 0 ? props : {});
  }
  Oval(props) {
    return global.SkiaDomApi.OvalNode(props !== null && props !== void 0 ? props : {});
  }
  Patch(props) {
    return global.SkiaDomApi.PatchNode(props !== null && props !== void 0 ? props : {});
  }
  Points(props) {
    return global.SkiaDomApi.PointsNode(props !== null && props !== void 0 ? props : {});
  }
  Rect(props) {
    return global.SkiaDomApi.RectNode(props);
  }
  RRect(props) {
    return global.SkiaDomApi.RRectNode(props);
  }
  Vertices(props) {
    return global.SkiaDomApi.VerticesNode(props);
  }
  Text(props) {
    return global.SkiaDomApi.TextNode(props);
  }
  TextPath(props) {
    return global.SkiaDomApi.TextPathNode(props);
  }
  TextBlob(props) {
    return global.SkiaDomApi.TextBlobNode(props);
  }
  Glyphs(props) {
    return global.SkiaDomApi.GlyphsNode(props);
  }
  DiffRect(props) {
    return global.SkiaDomApi.DiffRectNode(props);
  }
  Picture(props) {
    return global.SkiaDomApi.PictureNode(props);
  }
  Atlas(props) {
    return global.SkiaDomApi.AtlasNode(props);
  }
  ImageSVG(props) {
    return global.SkiaDomApi.ImageSVGNode(props);
  }

  // BlurMaskFilters
  BlurMaskFilter(props) {
    return global.SkiaDomApi.BlurMaskFilterNode(props);
  }

  // ImageFilters
  BlendImageFilter(props) {
    return global.SkiaDomApi.BlendImageFilterNode(props);
  }
  DropShadowImageFilter(props) {
    return global.SkiaDomApi.DropShadowImageFilterNode(props);
  }
  DisplacementMapImageFilter(props) {
    return global.SkiaDomApi.DisplacementMapImageFilterNode(props);
  }
  BlurImageFilter(props) {
    return global.SkiaDomApi.BlurImageFilterNode(props);
  }
  OffsetImageFilter(props) {
    return global.SkiaDomApi.OffsetImageFilterNode(props);
  }
  MorphologyImageFilter(props) {
    return global.SkiaDomApi.MorphologyImageFilterNode(props);
  }
  RuntimeShaderImageFilter(props) {
    return global.SkiaDomApi.RuntimeShaderImageFilterNode(props);
  }

  // Color Filters
  MatrixColorFilter(props) {
    return global.SkiaDomApi.MatrixColorFilterNode(props);
  }
  BlendColorFilter(props) {
    return global.SkiaDomApi.BlendColorFilterNode(props);
  }
  LumaColorFilter() {
    return global.SkiaDomApi.LumaColorFilterNode();
  }
  LinearToSRGBGammaColorFilter() {
    return global.SkiaDomApi.LinearToSRGBGammaColorFilterNode();
  }
  SRGBToLinearGammaColorFilter() {
    return global.SkiaDomApi.SRGBToLinearGammaColorFilterNode();
  }
  LerpColorFilter(props) {
    return global.SkiaDomApi.LerpColorFilterNode(props);
  }

  // Shaders
  Shader(props) {
    return global.SkiaDomApi.ShaderNode(props);
  }
  ImageShader(props) {
    return global.SkiaDomApi.ImageShaderNode(props);
  }
  ColorShader(props) {
    return global.SkiaDomApi.ColorShaderNode(props);
  }
  SweepGradient(props) {
    return global.SkiaDomApi.SweepGradientNode(props);
  }
  Turbulence(props) {
    return global.SkiaDomApi.TurbulenceNode(props);
  }
  FractalNoise(props) {
    return global.SkiaDomApi.FractalNoiseNode(props);
  }
  LinearGradient(props) {
    return global.SkiaDomApi.LinearGradientNode(props);
  }
  RadialGradient(props) {
    return global.SkiaDomApi.RadialGradientNode(props);
  }
  TwoPointConicalGradient(props) {
    return global.SkiaDomApi.TwoPointConicalGradientNode(props);
  }

  // Path Effects
  CornerPathEffect(props) {
    return global.SkiaDomApi.CornerPathEffectNode(props);
  }
  DiscretePathEffect(props) {
    return global.SkiaDomApi.DiscretePathEffectNode(props);
  }
  DashPathEffect(props) {
    return global.SkiaDomApi.DashPathEffectNode(props);
  }
  Path1DPathEffect(props) {
    return global.SkiaDomApi.Path1DPathEffectNode(props);
  }
  Path2DPathEffect(props) {
    return global.SkiaDomApi.Path2DPathEffectNode(props);
  }
  SumPathEffect() {
    return global.SkiaDomApi.SumPathEffectNode();
  }
  Line2DPathEffect(props) {
    return global.SkiaDomApi.Line2DPathEffectNode(props);
  }
  Blend(props) {
    return global.SkiaDomApi.BlendNode(props);
  }
  BackdropFilter(props) {
    return global.SkiaDomApi.BackdropFilterNode(props);
  }
  Box(props) {
    return global.SkiaDomApi.BoxNode(props);
  }
  BoxShadow(props) {
    return global.SkiaDomApi.BoxShadowNode(props);
  }

  // Paragraph
  Paragraph(props) {
    return global.SkiaDomApi.ParagraphNode(props);
  }
}
exports.JsiSkDOM = JsiSkDOM;
//# sourceMappingURL=JsiSkDOM.js.map