"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Canvas = void 0;
var _react = require("react");
var _SkiaViewNativeId = require("../views/SkiaViewNativeId");
var _Reconciler = require("../sksg/Reconciler");
var _skia = require("../skia");
var _SkiaPictureView = require("../views/SkiaPictureView.web");
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
// TODO: no need to go through the JS thread for this
const useOnSizeEvent = (resultValue, onLayout) => {
  return (0, _react.useCallback)(event => {
    if (onLayout) {
      onLayout(event);
    }
    const {
      width,
      height
    } = event.nativeEvent.layout;
    if (resultValue) {
      resultValue.value = {
        width,
        height
      };
    }
  }, [onLayout, resultValue]);
};
const Canvas = exports.Canvas = /*#__PURE__*/(0, _react.forwardRef)(({
  mode,
  debug,
  opaque,
  children,
  onSize,
  onLayout: _onLayout,
  ...viewProps
}, ref) => {
  const viewRef = (0, _react.useRef)(null);
  const rafId = (0, _react.useRef)(null);
  const onLayout = useOnSizeEvent(onSize, _onLayout);
  // Native ID
  const nativeId = (0, _react.useMemo)(() => {
    return _SkiaViewNativeId.SkiaViewNativeId.current++;
  }, []);

  // Root
  const root = (0, _react.useMemo)(() => new _Reconciler.SkiaSGRoot(_skia.Skia), []);

  // Render effects
  (0, _react.useEffect)(() => {
    root.render(children);
    if (viewRef.current) {
      viewRef.current.setPicture(root.getPicture());
    }
  }, [children, root]);
  (0, _react.useEffect)(() => {
    return () => {
      root.unmount();
    };
  }, [root]);
  const requestRedraw = (0, _react.useCallback)(() => {
    rafId.current = requestAnimationFrame(() => {
      root.render(children);
      if (viewRef.current) {
        viewRef.current.setPicture(root.getPicture());
      }
      if (mode === "continuous") {
        requestRedraw();
      }
    });
  }, [children, mode, root]);
  (0, _react.useEffect)(() => {
    if (mode === "continuous") {
      requestRedraw();
    }
    return () => {
      if (rafId.current !== null) {
        cancelAnimationFrame(rafId.current);
      }
    };
  }, [mode, requestRedraw]);

  // Component methods
  (0, _react.useImperativeHandle)(ref, () => ({
    makeImageSnapshot: rect => {
      return SkiaViewApi.makeImageSnapshot(nativeId, rect);
    },
    makeImageSnapshotAsync: rect => {
      return SkiaViewApi.makeImageSnapshotAsync(nativeId, rect);
    },
    redraw: () => {
      var _viewRef$current;
      (_viewRef$current = viewRef.current) === null || _viewRef$current === void 0 || _viewRef$current.redraw();
    },
    getNativeId: () => {
      return nativeId;
    }
  }));
  return /*#__PURE__*/React.createElement(_SkiaPictureView.SkiaPictureView, _extends({
    ref: viewRef,
    collapsable: false,
    nativeID: `${nativeId}`,
    debug: debug,
    opaque: opaque,
    onLayout: onLayout
  }, viewProps));
});
//# sourceMappingURL=Canvas.web.js.map