function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { JsiSkDOM } from "../dom/nodes";
export class Container {
  constructor(redraw = () => {}, getNativeId = () => 0) {
    this.redraw = redraw;
    this.getNativeId = getNativeId;
    _defineProperty(this, "_root", void 0);
    _defineProperty(this, "Sk", void 0);
    _defineProperty(this, "unmounted", false);
    this.Sk = new JsiSkDOM();
    this._root = this.Sk.Group();
  }
  get root() {
    return this._root;
  }
}
//# sourceMappingURL=Container.js.map