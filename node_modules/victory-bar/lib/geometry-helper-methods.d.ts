/**
 * A point in the 2d plane
 */
export declare const point: (x: number, y: number) => {
    x: number;
    y: number;
    distance(p1: {
        x: number;
        y: number;
    }): number;
    add(p1: {
        x: number;
        y: number;
    }): {
        x: number;
        y: number;
        distance(p1: {
            x: number;
            y: number;
        }): number;
        add(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        subtract(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        scalarMult(n: number): /*elided*/ any;
        scalarDivide(n: number): /*elided*/ any;
        equals(p1: {
            x: number;
            y: number;
        }): boolean;
    };
    subtract(p1: {
        x: number;
        y: number;
    }): {
        x: number;
        y: number;
        distance(p1: {
            x: number;
            y: number;
        }): number;
        add(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        subtract(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        scalarMult(n: number): /*elided*/ any;
        scalarDivide(n: number): /*elided*/ any;
        equals(p1: {
            x: number;
            y: number;
        }): boolean;
    };
    scalarMult(n: number): {
        x: number;
        y: number;
        distance(p1: {
            x: number;
            y: number;
        }): number;
        add(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        subtract(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        scalarMult(n: number): /*elided*/ any;
        scalarDivide(n: number): /*elided*/ any;
        equals(p1: {
            x: number;
            y: number;
        }): boolean;
    };
    scalarDivide(n: number): {
        x: number;
        y: number;
        distance(p1: {
            x: number;
            y: number;
        }): number;
        add(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        subtract(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        scalarMult(n: number): /*elided*/ any;
        scalarDivide(n: number): /*elided*/ any;
        equals(p1: {
            x: number;
            y: number;
        }): boolean;
    };
    equals(p1: {
        x: number;
        y: number;
    }): boolean;
};
type Center = ReturnType<typeof point>;
/**
 * A circle in the 2d plane
 */
export declare const circle: (center: Center, radius: number) => {
    center: {
        x: number;
        y: number;
        distance(p1: {
            x: number;
            y: number;
        }): number;
        add(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        subtract(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        scalarMult(n: number): /*elided*/ any;
        scalarDivide(n: number): /*elided*/ any;
        equals(p1: {
            x: number;
            y: number;
        }): boolean;
    };
    radius: number;
    hasIntersection(circle1: {
        center: Center;
        radius: number;
    }): boolean;
    equals(circle1: {
        center: Center;
        radius: number;
    }): boolean;
    intersection(circle1: {
        center: Center;
        radius: number;
    }): {
        x: number;
        y: number;
        distance(p1: {
            x: number;
            y: number;
        }): number;
        add(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        subtract(p1: {
            x: number;
            y: number;
        }): /*elided*/ any;
        scalarMult(n: number): /*elided*/ any;
        scalarDivide(n: number): /*elided*/ any;
        equals(p1: {
            x: number;
            y: number;
        }): boolean;
    }[];
    solveX(y: number): number[];
    solveY(x: number): number[];
};
export {};
//# sourceMappingURL=geometry-helper-methods.d.ts.map